#!/usr/bin/perl -w

use strict;
use warnings;

use lib 'lib';
use Getopt::Long;
use File::Spec ();
use Kinetic::Util::Exceptions qw/throw_fatal/;
use Kinetic::Util::Language;
my $LANG = Kinetic::Util::Language->get_handle;
Kinetic::Util::Context->language($LANG);
my ( $DEBUG, $VERBOSE, $HELP, $CONF );

sub try_to_use {
    my ( $module, $version, $reason ) = @_;
    eval "use $module $version";
    if ( my $error = $@ ) {
        throw_fatal [
            '[_1] [_2] or better not available for [_3]: [_4]',
            $module, $version, $reason, $error
        ];
    }
}

sub localize {
    return $LANG->maketext(@_) . "\n";
}

BEGIN {
    GetOptions(
        'debug'     => \$DEBUG,
        'verbose'   => \$VERBOSE,
        'help|?'    => \$HELP,
        'conf=s'    => \$CONF,
    );

    if ($HELP) {
        try_to_use( 'Pod::Usage', 1.12, 'help' );
        pod2usage( { -verbose => 2 } );
        exit;
    }

    if ( defined $CONF ) {
        $ENV{KINETIC_CONF} = $CONF;
    }

    else {
        $CONF = $ENV{KINETIC_CONF} || '';
    }
}

use Kinetic::Util::Config qw(:all);

if ($DEBUG) {
    try_to_use( 'Devel::Symdump', 2, 'debug' );
    my $symbols  = Devel::Symdump->new('main');
    my $length   = 0;
    my %value_of = do {
        no strict 'refs';
        map {
            s/^main:://;
            $length = length($_) if length($_) > $length;
            $_ => &$_;
          }
          grep {/^main::[:[:upper:]_]+$/} $symbols->functions();
    };
    foreach my $constant ( sort keys %value_of ) {

        # nothing to localize
        printf "%-${length}s => %s\n", $constant, $value_of{$constant};
    }
    print localize( 'Using config file "[_1]"', $CONF );
}

my $command = lc shift @ARGV || '';
unless ( $command =~ /^(?:stop|start|restart)$/ ) {
    die localize("You must specify stop, start, or restart");
}

try_to_use( ENGINE_CLASS, 0, 'loading engine' );
ENGINE_CLASS->$command;

__DATA__

=head1 Name 

kineticd --  Start the Kinetic engine

=head1 Synopsis

kineticd [-hdvrp] [-c conf_file] [start|stop|restart]

Options:

 -h, --help     Print this page and exit.
 -?             Same as --help
 -d, --debug    Print Kinetic::Util::Config constants and their values
 -v, --verbose  Print out which engine is being started
 -c, --conf     Use the specified config file instead of $ENV{KINETIC_CONF}

Command (one of the following commands must be supplied):

 stop         Stop the engine
 start        Start the engine
 restart      Restart the engine

=head1 Description

C<kineticd> starts the Kinetic engine.  The C<KINETIC_CONF> environment
variable should point to the location of the desired Kinetic configuration
file.  If not, you may specify C<--conf /path/to/my/conf_file> to supply (or
override) this value.  

Note that once installed, C<KINETIC_CONF> will probably not need to be set,
nor will the C<--conf> option be necessary unless you wish a different
configuration file than the installed one.

=head1 Command Line Options

=over 4

=item * -c, --conf

This should point to the value of the C<kinetic.conf> file.  Usually this is
only needed in testing if the C<KINETIC_CONF> environment variable is not set.

=back
