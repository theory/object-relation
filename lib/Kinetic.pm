package Kinetic;

# $Id$

use 5.008003;
use strict;
use version;
use encoding 'utf8';
use Kinetic::Meta;
use Kinetic::Meta::Widget;
use Kinetic::State qw(:all);

our $VERSION = version->new('0.0.1');

=head1 Name

=begin comment

Fake-out Module::Build. Delete if it ever changes to support =head1 headers
other than all uppercase.

=head1 NAME

=end comment

Kinetic - The Kinetic enterprise application framework

=head1 Synopsis

  package MyApp::Thingy;
  use base qw(Kinetic);
  BEGIN {
      my $km = Kinetic::Meta->new(
          key         => 'thingy',
          name        => 'Thingy',
          plural_name => 'Thingies',
      );
      $km->add_attribute(
        name => 'prvenence',
        type => 'string',
      );
      $km->build;
  }

=head1 Description

Kinetic is an enterprise application framework. It pulls together the
Class::Meta, Widget::Meta, and other modules to offer a platform for the rapid
development of enterprise appliactions in Perl.

This class serves as the base class for all Kinetic classes. It defines the
interface for all data access, and provides convenience methods to all of the
data store access methods required by the subclasses.

=cut

BEGIN {
    my $cm = Kinetic::Meta->new(
        key         => 'kinetic',
        name        => 'Kinetic',
        plural_name => 'Kinetics', # Oof.
        abstract    => 1,
    );

##############################################################################
# Constructors.
##############################################################################

=head1 Class Interface

=head2 Constructors

=head3 new

  my $kinetic = Kinetic->new;
  $kinetic = Kinetic->new(%init);

The universal Kinetic object constructor. It takes a list of parameters as its
arguments, constructs a new Kinetic object with its attributes set to the
values relevant to those parameters, and returns the new Kinetic object.

The C<new()> constructor is guaranteed to always be callable without
parameters. This makes it easy to create new Kinetic objects with their
parameters set to default values.

=cut

    # Create the new() constructor.
    $cm->add_constructor( name => 'new',
                          create  => 1 );

##############################################################################
# Class Methods
##############################################################################

=head2 Class Methods

=head3 my_class

  my $class = Kinetic->my_class;

Returns the Kinetic::Meta::Class object that describes this class. See
L<Class::Meta|Class::Meta> for more information.

=head3 my_key

  my $key = Kinetic->my_key;

Returns the key that uniquely identifies this class. The class key is used in
the Kinetic UI, and by the SOAP server. Equivalent to
C<< Kinetic->my_class->key >>.

=cut

    sub my_key { shift->my_class->key }

##############################################################################
# Instance Methods.
##############################################################################

=head1 Instance Interface

=head2 Accessors

=head3 guid

  my $guid        = $kinetic->guid;
  my $guid_bin    = $kinetic->guid_bin;
  my $guid_hex    = $kinetic->guid_hex;
  my $guid_base64 = $kinetic->guid_base64;

Returns the Kinetic object's globally unique identifier. All Kinetic objects
have a GUID as soon as they're created, even before they're saved to the data
store.

The GUID takes the form of a 32-bit string, such as
"12CAD854-08BD-11D9-8AF0-8AB02ED80375". It is also available in binary, hex
string, and Base64-encoded formats using the corresponding accessors:

=over 4

=item C<guid_bin>

=item C<guid_hex>

=item C<guid_base64>

=back

B<Notes:> Kinetic's GUIDs are generated by Data::UUID.

=cut

    my $ug = Data::UUID->new;
    $cm->add_attribute(
        name        => 'guid',
        label       => 'GUID',
        type        => 'guid',
        required    => 1,
        default     => sub { $ug->create_str },
        authz       => Class::Meta::READ,
        widget_meta => Kinetic::Meta::Widget->new(
            type => 'text',
            tip  => 'The globally unique identifier for this object',
        )
    );

    sub guid_bin    { $ug->from_string(  shift->guid     ) }
    sub guid_hex    { $ug->to_hexstring( shift->guid_bin ) }
    sub guid_base64 { $ug->to_b64string( shift->guid_bin ) }

##############################################################################

=head3 name

  my $name = $kinetic->name;
  $kinetic->name($name);

The name of the Kinetic object.

=cut

    $cm->add_attribute(
        name        => 'name',
        label       => 'Name',
        type        => 'string',
        required    => 1,
        widget_meta => Kinetic::Meta::Widget->new(
            type => 'text',
            tip  => 'The name of this object',
        )
    );

##############################################################################

=head3 description

  my $description = $kinetic->description;
  $kinetic->description($description);

The description of the Kinetic object.

=cut

    $cm->add_attribute(
        name        => 'description',
        label       => 'Description',
        type        => 'string',
        widget_meta => Kinetic::Meta::Widget->new(
            type => 'textarea',
            tip  => 'The description of this object',
        )
    );

##############################################################################

=head3 state

  my $state = $kinetic->state;
  $kinetic->state($state);

The state of the Kinetic object. Kinetic objects always have one of the
several states representing whether they're active, inactive, or deleted. See
L<Kinetic::State|Kinetic::State> for details on the various supported states.

A number of shortcut methods are provided to simplify checking for whether a
Kinetic object is in a particular state, or to set it to a particular state.
Those methods are:

=over 4

=item C<is_permanent>

=item C<is_active>

=item C<is_inactive>

=item C<is_deleted>

=item C<activate>

=item C<deactivate>

=item C<delete>

=item C<purge>

=back

=cut

    $cm->add_attribute(
        name        => 'state',
        label       => 'State',
        type        => 'state',
        required    => 1,
        default     => Kinetic::State::ACTIVE,
        widget_meta => Kinetic::Meta::Widget->new(
            type    => 'dropdown',
            tip     => 'The state of this object',
            options => [ ACTIVE, INACTIVE, DELETED, PURGED ],
        )
    );

    sub is_permanent { shift->state == PERMANENT }
    sub is_active    { shift->state == ACTIVE    }
    sub is_inactive  { shift->state == INACTIVE  }
    sub is_deleted   { shift->state == DELETED   }

    sub activate     { shift->state(ACTIVE)      }
    sub deactivate   { shift->state(INACTIVE)    }
    sub delete       { shift->state(DELETED)     }
    sub purge        { shift->state(PURGED)      }

    $cm->build;
} # BEGIN

##############################################################################

=head2 Other Instance Methods

=head3 clone

  my $clone = $bric->clone;

Creates a deep copy of the Kinetic object. Any contained objects will also be
cloned, so that a completely new object is created as an exact copy of the
existing object.

=cut

sub clone {
    my $self = shift;

    # Construct a new object and grab the GUID.
    my $class = $self->my_class;
    my $new = ref($self)->new;
    my $guid = $new->{guid};

    # I think it's okay to use the underlying hash, so that we're sure to
    # get all private attributes, too.
    while (my ($k, $v) = each %$self) {
        # XXX Need to account for circular references?
        $new->{$k} = UNIVERSAL::can($v, 'clone')
          ? $v->clone
          : $v;
    }

    # Restore the GUID (it was replaced in the while block) and return the
    # new object.
    $new->{guid} = $guid;
    return $new;
}

1;
__END__

##############################################################################

=head1 Author

=begin comment

Fake-out Module::Build. Delete if it ever changes to support =head1 headers
other than all uppercase.

=head1 AUTHOR

=end comment

Kineticode, Inc. <info@kineticode.com>

=head1 See Also

=over 4

=item L<Kinetic::Meta|Kinetic::Meta>

This module provides the interface for the Kinetic class automation and
introspection defined here.

=back

=head1 Copyright and License

Copyright (c) 2004 Kineticode, Inc.

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut



