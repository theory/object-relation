package Kinetic::UI::Email::Workflow::Parser;

# $Id$

# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted to you
# to modify and distribute this software under the terms of the GNU General
# Public License Version 2, and is only of importance to you if you choose to
# contribute your changes and enhancements to the community by submitting them
# to Kineticode, Inc.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with the
# Kinetic framework, to Kineticode, Inc., you confirm that you are the
# copyright holder for those contributions and you grant Kineticode, Inc.
# a nonexclusive, worldwide, irrevocable, royalty-free, perpetual license to
# use, copy, create derivative works based on those contributions, and
# sublicense and distribute those contributions and any derivatives thereof.

use strict;
use warnings;
use HOP::Stream qw/drop list_to_stream/;
use HOP::Parser qw/:all/;
use Exporter::Tidy parse => ['parse'];

use version;
our $VERSION = version->new('0.0.1');

# The indexes of tokens in the array refs
use constant PERFORM => 0;
use constant ACTION  => 1;
use constant STAGE   => 2;
use constant NOTE    => 3;

=head1 Name

Kinetic::UI::Email::Workflow::Parser - The workflow email parser

=head1 Synopsis

 use Kinetic::UI::Email::Workflow::Lexer  'lex';
 use Kinetic::UI::Email::Workflow::Parser 'parse';
 my $commands = parse( lex( $email_body ) );

=head1 Description

This class parses the tokens generated by
L<Kinetic::UI::Email::Workflow::Lexer|Kinetic::UI::Emai::Workflow::Lexer>.

=head1 Grammar

The following is the grammar for the Workflow email parser.  It's tough to get
easier than this.

 entire_input   ::= commands 'End_Of_Input'

 commands       ::= command | command commands

 command        ::= PERFORM ACTION [ STAGE ] [ NOTE ]

=cut

my ( $commands, $command );

my $Commands = parser { $commands->(@_) };
my $Command  = parser { $command->(@_) };

# entire_input   ::= commands 'End_Of_Input'

my $entire_input = T(
    concatenate( $Commands, \&End_of_Input ),
    sub {shift}
);

# commands       ::= command | command commands

$commands = T(
    concatenate( $Command, star($Command) ),
    sub {
        my @results = @_;
        my $tail    = pop @results;
        push @results, @$tail ? @$tail : ();
        return \@results;
    }
);

# command        ::= PERFORM ACTION [ STAGE ] [ NOTE ]
# XXX We might want NOTE to be an optional dependency on stage because at the
# present time, there's no use for it if we don't actually have a STAGE.
# However, it's not clear if this will always be the case and I'll leave
# things as they are unless they cause problems -- Ovid

$command = T(
    concatenate(
        lookfor('PERFORM'),
        lookfor('ACTION'),
        optional( lookfor('STAGE') ),
        optional( lookfor('NOTE') ),
    ),
    sub {
        foreach my $token ( STAGE, NOTE ) {
            $_[$token] = @{ $_[$token] } ? $_[$token][0] : '';
        }
        return \@_;
    }
);

##############################################################################

=head1 Interface

=head2 Exportable functions

=head3 C<parse>

  use Kinetic::UI::Email::Workflow::Lexer qw/lex/;
  use Kinetic::UI::Email::Workflow::Parser qw/parse/;
  my $commands = parse(lex($email_body));

The C<parse()> function takes the array ref of tokens returned by
L<Kinetic::UI::Email::Workflow::Lexer|Kinetic::UI::Email::Workflow::Lexer>
and returns an arrayref of arrayrefs.  Each contained array reference is in
the form:

 [ $perform, $action, $stage, $note ]

=over 4

=item C<$perform>

This is a boolean value indicating whether or not the C<$action> should be
performed.  At the present time, all actions which are not to be performed are
simply discarded.  Thus, C<$perform> should always be true.

=item C<$action>

This is the current action to be performed.  If C<$stage> is not an empty
string, the action corresponds with what should be done with the stage
(complete it or return it).  Otherwise, the C<$action> corresponds to a
command to the Workflow email system, such as send help email or request
verbose or compact emails.

=item C<$stage>

If present, this is the job stage on which the corresponding action should
act.

=item C<$note>

Any notes provided by the person sending the email will be in this field.

=back

=cut

sub parse {
    my $tokens = shift;
    my $stream = list_to_stream(@$tokens);
    my ( $results, $remainder ) = eval { $entire_input->($stream) };

    # Strip out actions they didn't check
    @$results = grep { $_->[PERFORM] } @$results;
    return $results;
}

1;
__END__

=head1 Copyright and License

Copyright (c) 2004-2006 Kineticode, Inc. <info@kineticode.com>

This work is made available under the terms of Version 2 of the GNU General
Public License. You should have received a copy of the GNU General Public
License along with this program; if not, download it from
L<http://www.gnu.org/licenses/gpl.txt> or write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

This work is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License Version 2 for more
details.

=cut
