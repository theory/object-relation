package Parser::DB;

use strict;
use warnings;
use Carp qw/croak/;
use Parser::Debug qw/:all/;

use Exporter::Tidy default => ['parse'];
use aliased 'Kinetic::Store::Search';

my $expression;
my $Expression = parser { $expression->(@_) };

#my $Term   = parser { $term  ->(@_) };
#my $Factor = parser { $factor->(@_) };
#
#$expression = alternate(T(concatenate($Term,
#                                    _(['OP', '+']),
#                                    $Expression),
#                        sub { [@_[1,0,2]] } ),
#                        $Term);
#$term       = alternate(T(concatenate($Factor,
#                                    _(['OP', '*']),
#                                    $Term),
#                        sub { [@_[1,0,2]] } ),
#                        $Factor);
#$factor     = alternate(_('INT'),
#                        T(
#                            concatenate(_(['OP', '(']),
#                                        $Expression,
#                                        _(['OP', ')'])),
#                            sub { $_[1] }) # strip parentheses
#                        );
use Data::Dumper;

my $normal_search;
my $Normal_search = parser { $normal_search->(@_) };
$normal_search = T(
    concatenate( '"normal search parser"',
                        _('IDENTIFIER'),
                        _('COMMA', '=>'),
        star('NEGATED', _('NEGATED')),
        star('KEYWORD', _('KEYWORD')),
                        _('VALUE'),
    ),
    sub { _make_search($_[0], $_[2][0], $_[3][0], $_[4]) }
);
my $between_search;
my $Between_search = parser { $between_search->(@_) };
$between_search = T(
    concatenate( '"between search parser"',
                        _('IDENTIFIER'),
                        _('COMMA', '=>'),
        star("NEGATED", _('NEGATED')),
        star("BETWEEN", _('BETWEEN')),
                        _('LBRACKET'),
                          _('VALUE'),
            alternate(
                          _('COMMA', '=>'),
                          _('SEPARATOR', ','),
            ),
                          _('VALUE'),
                        _('RBRACKET'),
    ),
    sub { $_[0], $_[2][0], 'BETWEEN', [$_[5] => $_[8]] }
);
            

$expression = alternate($Normal_search, $Between_search);
my $search  = concatenate('"full search"',
    $Expression,
    star(
        _('SEPARATOR', ','),
        $Expression
    ),
);
#my $entire_input = T(concatenate('"entire input"', $search, \&End_of_Input), sub { $_[0] });
my $entire_input = T(concatenate('"entire input"', $normal_search, \&End_of_Input), sub { $_[0] });

sub parse { return $entire_input->(shift) }

sub _make_search {
    my @args = @_;
#    print Dumper \@args;
    return Search->new(
        column   => $args[0],
        negated  => ($args[1] || ''),
        operator => ($args[2] || 'EQ'),
        data     => $args[3],
    );
}

1;
